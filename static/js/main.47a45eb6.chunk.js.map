{"version":3,"sources":["trivia.png","services/fetchQuestions.js","redux/actions/index.js","pages/Login.js","components/Header.js","components/Timer.js","components/NextQuestionBtn.js","pages/GameScreen.js","pages/SettingsScreen.js","components/RankingDiv.js","pages/Ranking.js","components/Results.js","components/HeaderFback.js","components/BtnRestart.js","components/BtnRanking.js","pages/FeedBack.js","App.js","serviceWorker.js","redux/reducers/loginReducer.js","redux/reducers/questionsReducer.js","redux/reducers/gameplayReducer.js","redux/reducers/settingsReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","fetchQuestions","category","difficulty","type","token","a","resultsArray","fetch","response","json","results","decodedResults","map","result","decodeURIComponent","question","correct_answer","sorted_answers","incorrect_answers","answer","sort","getToken","name","email","payload","getTokenThunk","dispatch","data","localStorage","setItem","Login","state","handleChange","bind","handleClick","renderInputs","target","value","this","setState","props","htmlFor","className","data-testid","onChange","handleButton","action","to","disabled","onClick","React","Component","connect","Header","gravatarEmail","score","assertions","mailToken","md5","toString","alt","src","login","gameInfo","Timer","timerCountdown","NextQuestionBtn","feat1","reset","GameScreen","timer","answered","qIndex","answers","setTimer","checkUpdate","setLocalStorage","navQuest","resetBtn","renderQuestions","playersArray","playerInfo","picture","getItem","JSON","parse","push","stringify","interval","setInterval","prevState","player","clearInterval","document","querySelectorAll","forEach","btn","style","border","history","setScoreAction","event","questions","querySelector","length","index","key","questionsReducer","settings","getQuestionsThunk","setScore","SettingsScreen","fetchCategories","updateSettings","categories","id","updateSettingsAction","RankingDiv","Ranking","ranking","getRanking","rankingArray","playerA","playerB","Results","Number","HeaderFback","BtnRestart","BtnRanking","FeedBack","resetScore","App","logo","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","loginReducer","calcScore","gameplayReducer","settingsReducer","trivia_categories","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47a45eb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const fetchQuestions = async (category,\n  difficulty,\n  type,\n  token) => {\n  let resultsArray = [];\n  if (category && difficulty && type) {\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&category=${category}&difficulty=${difficulty}&type=${type}&token=${token}&encode=url3986`);\n    const { results } = await response.json();\n    resultsArray = results;\n  } else {\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}&encode=url3986`);\n    const { results } = await response.json();\n    resultsArray = results;\n  }\n  const decodedResults = resultsArray.map((result) => ({\n    ...result,\n    category: decodeURIComponent(result.category),\n    question: decodeURIComponent(result.question),\n    correct_answer: decodeURIComponent(result.correct_answer),\n    sorted_answers: [\n      ...result.incorrect_answers.map((answer) => decodeURIComponent(answer)),\n      decodeURIComponent(result.correct_answer),\n    ].sort(),\n  }));\n  return decodedResults;\n};\n// Criar função separada na pasta \"services\"  OK\n// Tratar embaralhamento e decodificação nesse arquivo /\\.\n// Como sempre saber qual é a certa: ao invés de fazer array de strings, fazer array de objetos com o marcador de \"certa\" ou \"errada\".\n// Utilizar map no array results, montando objeto com respostas embaralhadas para cada pergunta.\n// Opções para decodificação: atob (depreciada), decodeURIComponent();\n\nexport default fetchQuestions;\n","import fetchQuestions from '../../services/fetchQuestions';\n\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const SET_SCORE = 'SET_SCORE';\nexport const RESET_SCORE = 'RESET_SCORE';\nexport const GET_CATEGORIES = 'GET_CATEGORIES';\nexport const UPDATE_SETTINGS = 'UPDATE_SETTINGS';\nexport const SET_SORT_ANSWERS = 'SET_SORT_ANSWERS';\n\nconst getToken = (name, email, token) => ({\n  type: GET_TOKEN,\n  payload: {\n    name,\n    email,\n    token,\n  },\n});\n\nexport const setScore = (timer, difficulty) => ({\n  type: SET_SCORE,\n  payload: {\n    timer,\n    difficulty,\n  },\n});\n\nconst getQuestions = (questions) => ({\n  type: GET_QUESTIONS,\n  payload: {\n    questions,\n  },\n});\n\nexport const resetScore = () => ({\n  type: RESET_SCORE,\n});\n\nconst getCategories = (categories) => ({\n  type: GET_CATEGORIES,\n  payload: {\n    categories,\n  },\n});\n\nexport const updateSettingsAction = (category, difficulty, type) => ({\n  type: UPDATE_SETTINGS,\n  payload: {\n    category,\n    difficulty,\n    type,\n  },\n});\n\nconst setSortAnswers = (answers) => ({\n  type: SET_SORT_ANSWERS,\n  payload: {\n    answers,\n  },\n});\n\nexport const sortAnswersThunk = () => (dispatch, getState) => {\n  const { questionsReducer: { questions } } = getState();\n  const answers = [questions[0].correct_answer,\n    ...questions[0].incorrect_answers];\n  for (let i = answers.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * i);\n    const temp = answers[i];\n    answers[i] = answers[j];\n    answers[j] = temp;\n  }\n  console.log(answers);\n  dispatch(setSortAnswers(answers));\n};\n\nexport const getQuestionsThunk = (category,\n  difficulty,\n  type,\n  token) => async (dispatch) => {\n  const results = await fetchQuestions(category, difficulty, type, token);\n  dispatch(getQuestions(results));\n};\n\nconst getTokenThunk = (name, email) => async (dispatch) => {\n  const response = await fetch('https://opentdb.com/api_token.php?command=request');\n  const data = await response.json();\n  dispatch(getToken(name, email, data.token));\n  localStorage.setItem('token', data.token);\n};\n\nexport const getCategoriesThunk = () => async (dispatch) => {\n  const response = await fetch('https://opentdb.com/api_category.php');\n  const data = await response.json();\n  dispatch(getCategories(data));\n};\n\nexport default getTokenThunk;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport getTokenThunk from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.renderInputs = this.renderInputs.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { getToken } = this.props;\n    const { name, email } = this.state;\n    getToken(name, email);\n  }\n\n  renderInputs() {\n    const { name, email } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"input-player-name\" className=\"display-container\">\n          Name:\n          <input\n            className=\"login form-control white\"\n            type=\"text\"\n            name=\"name\"\n            value={ name }\n            data-testid=\"input-player-name\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"input-player-name\" className=\"display-container\">\n          Email:\n          <input\n            className=\"login form-control white \"\n            type=\"text\"\n            name=\"email\"\n            value={ email }\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    const { name, email } = this.state;\n    let handleButton = true;\n    if (name && email) {\n      handleButton = false;\n    }\n    return (\n      <main>\n        <form action=\"\" className=\"display-container black forms\">\n          {this.renderInputs()}\n          <div className=\"start_btns\">\n            <Link to=\"/gameplay\">\n              <button\n                className=\"buttonLogin btn btn-primary display-container\"\n                type=\"button\"\n                data-testid=\"btn-play\"\n                disabled={ handleButton }\n                onClick={ this.handleClick }\n              >\n                Jogar\n              </button>\n            </Link>\n\n            <Link to=\"/settings\">\n              <button\n                className=\"btn submit-button btn-primary display-container\"\n                type=\"button\"\n                data-testid=\"btn-settings\"\n              >\n                Configurações\n              </button>\n            </Link>\n\n          </div>\n\n        </form>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: (name, email) => dispatch(getTokenThunk(name, email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { gravatarEmail, name, score, assertions } = this.props;\n\n    const mailToken = md5(gravatarEmail).toString();\n\n    return (\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          alt=\"profile\"\n          src={ `https://www.gravatar.com/avatar/${mailToken}` }\n        />\n        <p\n          data-testid=\"header-player-name\"\n        >\n          {`Player: ${name}`}\n        </p>\n        <span>Placar: </span>\n        <span\n          data-testid=\"header-score\"\n        >\n          {score}\n        </span>\n        <br />\n        <span>Acertos: </span>\n        <span data-testid=\"feedback-total-question\">\n          {assertions}\n        </span>\n\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  login: { gravatarEmail, name },\n  gameInfo: { score, assertions },\n}) => ({\n  gravatarEmail,\n  name,\n  score,\n  assertions,\n});\n\nHeader.propTypes = {\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends React.Component {\n  render() {\n    const { timerCountdown } = this.props;\n    return (\n      <p>\n        { timerCountdown }\n      </p>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timerCountdown: PropTypes.number.isRequired,\n};\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NextQuestionBtn extends React.Component {\n  render() {\n    const { feat1, reset } = this.props;\n    return (\n      <div className=\"black2\">\n        <button\n          className=\"btn submit-button btn-success\"\n          onClick={ () => {\n            feat1();\n            reset();\n          } }\n          type=\"button\"\n          data-testid=\"btn-next\"\n        >\n          Próxima\n        </button>\n      </div>\n    );\n  }\n}\n\nNextQuestionBtn.propTypes = {\n  feat1: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\nexport default NextQuestionBtn;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport NextQuestionBtn from '../components/NextQuestionBtn';\n\nimport { setScore, getQuestionsThunk } from '../redux/actions';\n\nclass GameScreen extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 30,\n      answered: false,\n      qIndex: 0,\n      answers: [],\n    };\n\n    this.setTimer = this.setTimer.bind(this);\n    this.checkUpdate = this.checkUpdate.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.score = this.score.bind(this);\n    this.setLocalStorage = this.setLocalStorage.bind(this);\n    this.navQuest = this.navQuest.bind(this);\n    this.resetBtn = this.resetBtn.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderQuestions();\n    this.setTimer();\n  }\n\n  componentDidUpdate() {\n    this.checkUpdate();\n    this.setLocalStorage();\n  }\n\n  componentWillUnmount() {\n    const { name, score, gravatarEmail } = this.props;\n    const mailToken = md5(gravatarEmail).toString();\n    let playersArray = [];\n    const playerInfo = {\n      name,\n      score,\n      picture: `https://www.gravatar.com/avatar/${mailToken}`,\n    };\n    if (localStorage.getItem('ranking')) {\n      playersArray = JSON.parse(localStorage.getItem('ranking'));\n    }\n    playersArray.push(playerInfo);\n    localStorage.setItem('ranking', JSON.stringify(playersArray));\n    this.resetBtn();\n    // Link de referência para armazenar array de ranking no Local Storage: https://pt.stackoverflow.com/questions/329223/armazenar-um-array-de-objetos-em-um-local-storage-com-js\n  }\n\n  setTimer() {\n    const ONE_SECOND = 1000;\n    this.interval = setInterval(() => {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  setLocalStorage() {\n    const { score, name, gravatarEmail, assertions } = this.props;\n    const player = {\n      player: {\n        name,\n        assertions,\n        gravatarEmail,\n        score,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(player));\n  }\n\n  checkUpdate() {\n    const { timer } = this.state;\n    if (timer === 0) {\n      clearInterval(this.interval);\n    }\n  }\n\n  resetBtn() {\n    document.querySelectorAll('.btn').forEach((btn) => { btn.style.border = ''; });\n    this.setState({\n      timer: 30,\n      answered: false,\n    }, () => this.setTimer());\n  }\n\n  navQuest() {\n    const quest = 4;\n    const { history } = this.props;\n    const { qIndex } = this.state;\n\n    if (qIndex === quest) {\n      history.push('/feedback');\n    }\n    this.setState((prevState) => ({\n      ...prevState,\n      qIndex: prevState.qIndex + 1,\n    }));\n  }\n\n  score(timer, difficulty) {\n    const { setScoreAction } = this.props;\n    setScoreAction(timer, difficulty);\n  }\n\n  handleClick(event) {\n    const { timer, qIndex } = this.state;\n    const { questions } = this.props;\n    if (event.target.name === 'correct') {\n      event.target.style.border = '3px solid rgb(6, 240, 15)';\n      document.querySelectorAll('.btn-wrong').forEach((btn) => {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      });\n      clearInterval(this.interval);\n      this.score(timer, questions[qIndex].difficulty);\n    } else if (event.target.name === 'wrong') {\n      clearInterval(this.interval);\n      document.querySelectorAll('.btn-wrong').forEach((btn) => {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      });\n      document.querySelector('.btn-correct').style.border = '3px solid rgb(6, 240, 15)';\n    }\n    this.setState({\n      answered: true,\n    });\n  }\n\n  async renderQuestions() {\n    const { category, difficulty, type, token, fetchQuestions } = this.props;\n    await fetchQuestions(category, difficulty, type, token);\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { timer, answered, qIndex } = this.state;\n    if (questions.length === 0) {\n      return <span>Carregando...</span>;\n    }\n    return (\n      <div className=\"black2\">\n        <Header />\n        <Timer timerCountdown={ timer } />\n        <h1 data-testid=\"question-category\">{questions[qIndex].category}</h1>\n        <div className=\"quest-box\">\n          <p className=\"shadow-lg p-3 mb-5 bg-body question-text\" data-testid=\"question-text\">{questions[qIndex].question}</p>\n        </div>\n        <div>\n          {questions[qIndex].sorted_answers.map((answer, index) => {\n            if (questions[qIndex].correct_answer === answer) {\n              return (\n                <button\n                  key={ answer }\n                  className=\"btn-correct btn-primary btn\"\n                  type=\"button\"\n                  name=\"correct\"\n                  onClick={ this.handleClick }\n                  disabled={ timer === 0 }\n                >\n                  { answer }\n                </button>\n              );\n            }\n            return (\n              <button\n                className=\"btn-wrong btn-primary btn\"\n                key={ answer }\n                type=\"button\"\n                name=\"wrong\"\n                onClick={ this.handleClick }\n                disabled={ timer === 0 }\n              >\n                {answer}\n              </button>\n            );\n          })}\n        </div>\n        {(answered || timer === 0)\n        && <NextQuestionBtn feat1={ this.navQuest } reset={ this.resetBtn } />}\n      </div>\n    );\n  }\n}\nGameScreen.propTypes = {\n  token: PropTypes.string.isRequired,\n  fetchQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  setScoreAction: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.login.token,\n  questions: state.questionsReducer.questions,\n  gravatarEmail: state.login.gravatarEmail,\n  name: state.login.name,\n  score: state.gameInfo.score,\n  assertions: state.gameInfo.assertions,\n  category: state.settings.category,\n  difficulty: state.settings.difficulty,\n  type: state.settings.type,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchQuestions: (category, difficulty, type, token) => {\n    dispatch(getQuestionsThunk(category, difficulty, type, token));\n  },\n  setScoreAction: (timer, difficulty) => {\n    dispatch(setScore(timer, difficulty));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameScreen);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { getCategoriesThunk, updateSettingsAction } from '../redux/actions';\n\nclass SettingsScreen extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      category: '9',\n      difficulty: 'easy',\n      type: 'multiple',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCategories } = this.props;\n    fetchCategories();\n  }\n\n  componentDidUpdate() {\n    const { updateSettings } = this.props;\n    const { category, difficulty, type } = this.state;\n    updateSettings(category, difficulty, type);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { categories = [] } = this.props;\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\"> Settings </h1>\n        <form action=\"\" className=\"d-flex justify-content-evenly\">\n          <label htmlFor=\"category\">\n            Selecione a categoria:\n            <select\n              name=\"category\"\n              id=\"category\"\n              onChange={ this.handleChange }\n              className=\"form-select\"\n            >\n              {categories.map((category) => (\n                <option key={ category.id } value={ category.id }>{category.name}</option>\n              ))}\n            </select>\n          </label>\n          <label htmlFor=\"difficulty\">\n            Selecione a dificuldade:\n            <select\n              name=\"difficulty\"\n              id=\"difficulty\"\n              onChange={ this.handleChange }\n              className=\"form-select\"\n            >\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </label>\n          <label htmlFor=\"type\">\n            Selecione o tipo de respostas:\n            <select\n              name=\"type\"\n              id=\"type\"\n              onChange={ this.handleChange }\n              className=\"form-select\"\n            >\n              <option value=\"multiple\">Multiple Choice</option>\n              <option value=\"boolean\">True or False</option>\n            </select>\n          </label>\n        </form>\n        <br />\n        <br />\n        <Link to=\"/\">\n          <button type=\"button\" className=\"buttonLogin btn btn-primary\">\n            Voltar para o login\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nSettingsScreen.propTypes = {\n  fetchCategories: PropTypes.func.isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  categories: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  categories: state.settings.categories,\n});\n\nconst mapDispatchProps = (dispatch) => ({\n  fetchCategories: () => dispatch(getCategoriesThunk()),\n  updateSettings: (category, difficulty, type) => dispatch(\n    updateSettingsAction(category, difficulty, type),\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchProps)(SettingsScreen);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass RankingDiv extends React.Component {\n  render() {\n    const { player, index } = this.props;\n    return (\n      <section className=\"black\">\n        <img src={ player.picture } alt=\"\" />\n        <p data-testid={ `player-name-${index}` }>\n          {player.name}\n        </p>\n\n        <div />\n        <p data-testid={ `player-score-${index}` }>\n          {player.score}\n        </p>\n      </section>\n    );\n  }\n}\n\nRankingDiv.propTypes = {\n  player: PropTypes.shape({\n    picture: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default RankingDiv;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport RankingDiv from '../components/RankingDiv';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n\n    this.getRanking = this.getRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.getRanking();\n  }\n\n  getRanking() {\n    const rankingArray = JSON.parse(localStorage.getItem('ranking'));\n    this.setState({\n      ranking: rankingArray,\n    });\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"black2\">\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <div className=\"display-container ranking-info\">\n          <div>\n            { ranking.sort((playerA, playerB) => playerB.score - playerA.score)\n              .map((player, index) => (\n                <RankingDiv\n                  key={ index }\n                  index={ index }\n                  player={ player }\n                />\n              ))}\n          </div>\n          <Link to=\"/\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              data-testid=\"btn-go-home\"\n            >\n              Volta para a tela inicial\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Ranking;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Results extends Component {\n  render() {\n    const { assertions, score } = this.props;\n    return (\n      <main>\n        <span>Placar: </span>\n        <span\n          data-testid=\"feedback-total-score\"\n        >\n          {Number(score)}\n        </span>\n        <br />\n        <span>Acertos: </span>\n        <span data-testid=\"feedback-total-question\">\n          {assertions}\n        </span>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = ({ gameInfo: { assertions, score } }) => ({\n  assertions,\n  score,\n});\n\nResults.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Results);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\n\nclass HeaderFback extends Component {\n  render() {\n    const { gravatarEmail, name, score } = this.props;\n\n    const mailToken = md5(gravatarEmail).toString();\n\n    return (\n      <header>\n        <img\n          data-testid=\"header-profile-picture\"\n          alt=\"profile\"\n          src={ `https://www.gravatar.com/avatar/${mailToken}` }\n        />\n        <p\n          data-testid=\"header-player-name\"\n        >\n          {`Player: ${name}`}\n        </p>\n        <span>Header Score:</span>\n        <span data-testid=\"header-score\">{score}</span>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  login: { gravatarEmail, name },\n  gameInfo: { score },\n}) => ({\n  gravatarEmail,\n  name,\n  score,\n});\n\nHeaderFback.propTypes = {\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(HeaderFback);\n","import React, { Component } from 'react';\n\nexport default class BtnRestart extends Component {\n  render() {\n    return (\n      <button\n        className=\"btn btn-primary\"\n        type=\"button\"\n        data-testid=\"btn-play-again\"\n      >\n        Jogar Novamente\n      </button>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class BtnRanking extends Component {\n  render() {\n    return (\n      <button\n        className=\"btn btn-primary\"\n        data-testid=\"btn-ranking\"\n        type=\"button\"\n      >\n        Ver Ranking\n      </button>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Results from '../components/Results';\nimport HeaderFback from '../components/HeaderFback';\nimport BtnRestart from '../components/BtnRestart';\nimport BtnRanking from '../components/BtnRanking';\n\nimport { resetScore as resetScoreAction } from '../redux/actions';\n\nclass FeedBack extends Component {\n  componentWillUnmount() {\n    const { resetScore } = this.props;\n    resetScore();\n  }\n\n  render() {\n    const { assertions } = this.props;\n    const feedBack = 3;\n    return (\n      <div className=\"black2\">\n        <HeaderFback />\n        <Results />\n        <p data-testid=\"feedback-text\"> FeedbackScreen</p>\n        { assertions < feedBack\n          ? <p data-testid=\"feedback-text\">Podia ser melhor...</p>\n          : <p data-testid=\"feedback-text\">Mandou bem!</p>}\n        <Link to=\"/\">\n          <BtnRestart />\n        </Link>\n        <Link to=\"ranking\">\n          <BtnRanking />\n        </Link>\n      </div>\n    );\n  }\n}\n\nFeedBack.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  resetScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.gameInfo.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetScore: () => dispatch(resetScoreAction()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FeedBack);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport GameScreen from './pages/GameScreen';\nimport SettingsScreen from './pages/SettingsScreen';\nimport Ranking from './pages/Ranking';\nimport FeedBack from './pages/FeedBack';\n\nimport logo from './trivia.png';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/gameplay\" component={ GameScreen } />\n        <Route exact path=\"/settings\" component={ SettingsScreen } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/feedback\" component={ FeedBack } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_TOKEN } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  gravatarEmail: '',\n  token: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_TOKEN:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n      token: action.payload.token,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import { GET_QUESTIONS } from '../actions';\n\nconst INITIAL_STATE = {\n  questions: [],\n};\n\nconst questionsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_QUESTIONS:\n    return { ...state, questions: action.payload.questions };\n\n  default:\n    return state;\n  }\n};\n\nexport default questionsReducer;\n","import { RESET_SCORE, SET_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  assertions: 0,\n  score: 0,\n};\n\nconst calcScore = (action, state) => {\n  const easy = 'easy';\n  const medium = 'medium';\n  const hard = 'hard';\n  const pt1 = 1;\n  const pt2 = 2;\n  const pt3 = 3;\n  const pt = 10;\n  switch (action.payload.difficulty) {\n  case easy: return (state.score + (pt + (action.payload.timer * pt1)));\n  case medium: return (state.score + (pt + (action.payload.timer * pt2)));\n  case hard: return (state.score + (pt + (action.payload.timer * pt3)));\n  default: return state.score;\n  }\n};\n\nconst gameplayReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_SCORE:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n      score: calcScore(action, state),\n    };\n  case RESET_SCORE:\n    return {\n      ...state,\n      score: 0,\n      assertions: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default gameplayReducer;\n","import { GET_CATEGORIES, UPDATE_SETTINGS } from '../actions';\n\nconst INITIAL_STATE = {\n  categories: [],\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst settingsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CATEGORIES:\n    return { ...state, categories: action.payload.categories.trivia_categories };\n  case UPDATE_SETTINGS:\n    return {\n      ...state,\n      category: action.payload.category,\n      difficulty: action.payload.difficulty,\n      type: action.payload.type,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default settingsReducer;\n","import { combineReducers } from 'redux';\n\nimport loginReducer from './loginReducer';\nimport questionsReducer from './questionsReducer';\nimport gameplayReducer from './gameplayReducer';\nimport settingsReducer from './settingsReducer';\n\nconst rootReducer = combineReducers({\n  login: loginReducer,\n  questionsReducer,\n  gameInfo: gameplayReducer,\n  settings: settingsReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}